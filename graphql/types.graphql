scalar DateTime

scalar Json

enum BoardAvatar {
  NORTHERN_LIGHTS
  DENALI
  FOX
  PUFFIN
  TREETOPS
}

# Payload returned after signing up
type SignupUserPayload {
  # user id
  id: ID!
  # token used to authenticate, pass it as a bearer in the authentication header
  token: String!
  user: User!
}

# Payload returned when authenticating
type AuthenticateUserPayload {
  # user id
  id: ID!
  # token used to authenticate, pass it as a bearer in the authentication header
  token: String!
  user: User!
}

# Data needed to display the QR code when upgrading to 2-Factor Authentication
type UpgradeTo2FactorPayload {
  # totp secret
  secret: String
  # svg for the qr code
  qrCode: String
}

enum Role {
  ADMIN
  EDITOR
  SPECTATOR
}

enum LengthAndMass {
  SI
  IMPERIAL
}

enum Temperature {
  CELSIUS
  FARENHEIT
  KELVIN
}

enum DateFormat {
  DMY
  MDY
  YMD
  YDM
}

enum TimeFormat {
  H24
  H12
}

# All available mutations
type Mutation {
  # Gets an authentication token
  AuthenticateUser(
    email: String!
    password: String!
    twoFactorCode: String # include only if 2-Factor Authentication is active
  ): AuthenticateUserPayload

  # Generates a permanent access token
  GeneratePermanentAccessToken(
    customName: String! # name of the token
  ): AuthenticateUserPayload

  # removes a permanent access token
  DeletePermanentAccesToken(id: ID!): ID

  # Creates a new account
  SignupUser(
    email: String!
    password: String!
    fullName: String!
  ): SignupUserPayload

  # Sends an email with a llink to change the password
  SendPasswordRecoveryEmail(email: String!): Boolean

  # Upgrades a user to 2 factor authentication
  UpgradeTo2FactorAuthentication: UpgradeTo2FactorPayload

  # Changes the password of the authenticated user
  ChangePassword(newPassword: String!): AuthenticateUserPayload

  ResendVerificationEmail: Boolean

  shareBoard(boardId: ID!, email: String!, role: Role!): Board
  stopSharingBoard(boardId: ID!, email: String!): Board

  shareDevice(deviceId: ID!, email: String!, role: Role!): Device
  stopSharingDevice(deviceId: ID!, email: String!): Device

  shareValue(valueId: ID!, email: String!, role: Role!): Value
  stopSharingValue(valueId: ID!, email: String!): Value

  # Creates a Board
  CreateBoard(
    customName: String!
    avatar: BoardAvatar
    favorite: Boolean
    index: Int
    quietMode: Boolean
  ): Board

  # Creates a new Device
  CreateDevice(
    # Product name, for example Igloo Thermostat
    deviceType: String
    # Custom name gave by the end-user to the device
    customName: String!
    # device icon, shown in Igloo Aurora
    icon: String
    # used to sort the devices in Igloo Aurora
    index: Int
    signalStatus: Float
    batteryStatus: Float
    batteryCharging: Boolean
    boardId: ID
    firmware: String
    quietMode: Boolean
  ): Device

  # Creates a new notification
  CreateNotification(
    # device associated with the notification
    deviceId: ID!
    content: String! # optional if you want to change the date # date: DateTime
    date: DateTime
  ): Notification

  # Creates a new FloatValue
  CreateFloatValue(
    # device owning the value
    deviceId: ID!
    # whether the value should be READ_ONLY or READ_WRITE in Igloo Aurora
    permission: ValuePermission!
    # whether the value should be VISIBLE, HIDDEN or INVISIBLE in Igloo Aurora
    relevance: ValueRelevance!
    # additional details about the value
    valueDetails: String
    value: Float!
    # used when displaying or changing the value in Igloo Aurora
    precision: Float
    # [min, max]
    boundaries: [Float!]
    # name of the value, displayed in Igloo Aurora
    customName: String!
    # tile size in Igloo Aurora
    tileSize: TileSize
    index: Int
  ): FloatValue

  # Creates a StringValue
  CreateStringValue(
    # device owning the value
    deviceId: ID!
    # whether the value should be READ_ONLY or READ_WRITE in Igloo Aurora
    permission: ValuePermission!
    # whether the value should be VISIBLE, HIDDEN or INVISIBLE in Igloo Aurora
    relevance: ValueRelevance!
    # additional details about the value
    valueDetails: String
    value: String!
    # max length of the string
    maxChars: Int
    # name of the value, displayed in Igloo Aurora
    customName: String!
    # tile size in Igloo Aurora
    tileSize: TileSize
    # allowed values for the string
    allowedValues: [String!]
    index: Int
  ): StringValue

  # Creates a BooleanValue
  CreateBooleanValue(
    # device owning the value
    deviceId: ID!
    # whether the value should be READ_ONLY or READ_WRITE in Igloo Aurora
    permission: ValuePermission!
    # whether the value should be VISIBLE, HIDDEN or INVISIBLE in Igloo Aurora
    relevance: ValueRelevance!
    # additional details about the value
    valueDetails: String
    value: Boolean!
    # name of the value, displayed in Igloo Aurora
    customName: String!
    # tile size in Igloo Aurora
    tileSize: TileSize
    index: Int
  ): BooleanValue

  # Creates a ColourValue
  CreateColourValue(
    # device owning the value
    deviceId: ID!
    # whether the value should be READ_ONLY or READ_WRITE in Igloo Aurora
    permission: ValuePermission!
    # whether the value should be VISIBLE, HIDDEN or INVISIBLE in Igloo Aurora
    relevance: ValueRelevance!
    # additional details about the value
    valueDetails: String
    # hex code
    value: String!
    # name of the value, displayed in Igloo Aurora
    customName: String!
    # tile size in Igloo Aurora
    tileSize: TileSize
    # allowed colours
    allowedValues: [String!]
    index: Int
  ): ColourValue

  # Creates a MapValue
  CreateMapValue(
    # device owning the value
    deviceId: ID!
    # whether the value should be READ_ONLY or READ_WRITE in Igloo Aurora
    permission: ValuePermission!
    # whether the value should be VISIBLE, HIDDEN or INVISIBLE in Igloo Aurora
    relevance: ValueRelevance!
    # additional details about the value
    valueDetails: String
    # name of the value, displayed in Igloo Aurora
    customName: String!
    # tile size in Igloo Aurora
    tileSize: TileSize
    # GEOJson string
    value: String
    latitude: Float
    longitude: Float
    height: Float
    index: Int
  ): MapValue

  # Creates a new PlotValue
  CreatePlotValue(
    # device owning the value
    deviceId: ID!
    # whether the value should be READ_ONLY or READ_WRITE in Igloo Aurora
    permission: ValuePermission!
    # whether the value should be VISIBLE, HIDDEN or INVISIBLE in Igloo Aurora
    relevance: ValueRelevance!
    # additional details about the value
    valueDetails: String
    # used when the end-user reads or modifies the value
    precision: Float
    # [min, max]
    boundaries: [Float!]
    # name of the value, displayed in Igloo Aurora
    customName: String!
    # tile size in Igloo Aurora
    tileSize: TileSize
    # alert threshold, values above the threshold will be displayed in red in Igloo Aurora
    threshold: Float
    index: Int
  ): PlotValue

  # Creates a new node in a plot
  CreatePlotNode(
    # id of the parent plot
    plotId: ID!
    # default is now
    timestamp: DateTime
    value: Float!
  ): PlotNode

  # Creates a new PlotValue
  CreateStringPlotValue(
    # device owning the value
    deviceId: ID!
    # whether the value should be READ_ONLY or READ_WRITE in Igloo Aurora
    permission: ValuePermission!
    # whether the value should be VISIBLE, HIDDEN or INVISIBLE in Igloo Aurora
    relevance: ValueRelevance!
    # additional details about the value
    valueDetails: String
    # name of the value, displayed in Igloo Aurora
    customName: String!
    # tile size in Igloo Aurora
    tileSize: TileSize
    # allowed labels
    allowedValues: [String!]
    index: Int
  ): StringPlotValue

  # Creates a new node in a plot
  CreateStringPlotNode(
    # id of the parent plot
    plotId: ID!
    # default is now
    timestamp: DateTime
    value: String!
  ): StringPlotNode

  # Change user's data
  user(
    email: String
    timezone: String
    language: String
    # If active push notifications aren't sent
    quietMode: Boolean
    devMode: Boolean
    nightMode: Boolean
    usageCap: Int
    paymentPlan: PaymentPlan
    fullName: String
    profileIcon: String
    profileIconColor: String
    settings_lengthAndMass: LengthAndMass
    settings_temperature: Temperature
    settings_dateFormat: DateFormat
    settings_timeFormat: TimeFormat
  ): User

  updatePaymentInfo(stripeToken: String!): Boolean

  # changes board's data
  board(
    id: ID!
    customName: String
    avatar: BoardAvatar
    favorite: Boolean
    index: Int
    quietMode: Boolean
  ): Board

  # changes device's data
  device(
    # device id
    id: ID!
    # Product name, for example Igloo Thermostat
    deviceType: String
    # Custom name gave by the end-user to the device
    customName: String
    # device icon, shown in Igloo Aurora
    icon: String
    # used to sort the devices in Igloo Aurora
    index: Int
    signalStatus: Float
    batteryStatus: Float
    batteryCharging: Boolean
    boardId: ID
    firmware: String
    quietMode: Boolean
  ): Device

  resetOnlineState(deviceId: ID!): Device

  # changes floatValue's data
  floatValue(
    # value id
    id: ID!
    # whether the value should be READ_ONLY or READ_WRITE in Igloo Aurora
    permission: ValuePermission
    # whether the value should be VISIBLE, HIDDEN or INVISIBLE in Igloo Aurora
    relevance: ValueRelevance
    # additional details about the value
    valueDetails: String
    value: Float
    # used when displaying or changing the value in Igloo Aurora
    precision: Float
    # [min, max]
    boundaries: [Float!]
    # name of the value, displayed in Igloo Aurora
    customName: String
    # tile size in Igloo Aurora
    tileSize: TileSize
    index: Int
  ): FloatValue

  # changes stringValue's data
  stringValue(
    # value id
    id: ID!
    # whether the value should be READ_ONLY or READ_WRITE in Igloo Aurora
    permission: ValuePermission
    # whether the value should be VISIBLE, HIDDEN or INVISIBLE in Igloo Aurora
    relevance: ValueRelevance
    # additional details about the value
    valueDetails: String
    value: String
    # max length of the string
    maxChars: Int
    # name of the value, displayed in Igloo Aurora
    customName: String
    # tile size in Igloo Aurora
    tileSize: TileSize
    # allowed values for the string
    allowedValues: [String!]
    index: Int
  ): StringValue

  # changes booleanValue's data
  booleanValue(
    # value id
    id: ID!
    # whether the value should be READ_ONLY or READ_WRITE in Igloo Aurora
    permission: ValuePermission
    # whether the value should be VISIBLE, HIDDEN or INVISIBLE in Igloo Aurora
    relevance: ValueRelevance
    # additional details about the value
    valueDetails: String
    value: Boolean
    # name of the value, displayed in Igloo Aurora
    customName: String
    # tile size in Igloo Aurora
    tileSize: TileSize
    index: Int
  ): BooleanValue

  # changes colourValue's data
  colourValue(
    # value id
    id: ID!
    # whether the value should be READ_ONLY or READ_WRITE in Igloo Aurora
    permission: ValuePermission
    # whether the value should be VISIBLE, HIDDEN or INVISIBLE in Igloo Aurora
    relevance: ValueRelevance
    # additional details about the value
    valueDetails: String
    # hex code
    value: String
    # name of the value, displayed in Igloo Aurora
    customName: String
    # tile size in Igloo Aurora
    tileSize: TileSize
    # allowed colours
    allowedValues: [String!]
    index: Int
  ): ColourValue

  # changes mapValue's data
  mapValue(
    # value id
    id: ID!
    # whether the value should be READ_ONLY or READ_WRITE in Igloo Aurora
    permission: ValuePermission
    # whether the value should be VISIBLE, HIDDEN or INVISIBLE in Igloo Aurora
    relevance: ValueRelevance
    # additional details about the value
    valueDetails: String
    # name of the value, displayed in Igloo Aurora
    customName: String
    # tile size in Igloo Aurora
    tileSize: TileSize
    # GEOJson string
    value: String
    latitude: Float
    longitude: Float
    height: Float
    index: Int
  ): MapValue

  # changes plotValue's data
  plotValue(
    # value id
    id: ID!
    # whether the value should be READ_ONLY or READ_WRITE in Igloo Aurora
    permission: ValuePermission
    # whether the value should be VISIBLE, HIDDEN or INVISIBLE in Igloo Aurora
    relevance: ValueRelevance
    # additional details about the value
    valueDetails: String
    # used when the end-user reads or modifies the value
    precision: Float
    # [min, max]
    boundaries: [Float!]
    # name of the value, displayed in Igloo Aurora
    customName: String
    # tile size in Igloo Aurora
    tileSize: TileSize
    # alert threshold, values above the threshold will be displayed in red in Igloo Aurora
    threshold: Float
    index: Int
  ): PlotValue

  # change plotNode's data
  plotNode(
    # node's id
    id: ID!
    # node's value
    value: Float
    # node's timestamp
    timestamp: DateTime
  ): PlotNode

  # changes StringPlotValue's data
  stringPlotValue(
    # value id
    id: ID!
    # whether the value should be READ_ONLY or READ_WRITE in Igloo Aurora
    permission: ValuePermission
    # whether the value should be VISIBLE, HIDDEN or INVISIBLE in Igloo Aurora
    relevance: ValueRelevance
    # additional details about the value
    valueDetails: String
    # name of the value, displayed in Igloo Aurora
    customName: String
    # tile size in Igloo Aurora
    tileSize: TileSize
    # allowed labels
    allowedValues: [String!]
    index: Int
  ): PlotValue

  # change StringPlotNode's data
  stringPlotNode(
    # node's id
    id: ID!
    # node's value
    value: String
    # node's timestamp
    timestamp: DateTime
  ): StringPlotNode

  # change notification's data
  notification(
    # notification's id
    id: ID!
    # notification's content
    content: String
    # notification's date
    date: DateTime
    # whether the notification has already been visualized
    visualized: Boolean
    snackbarVisualized: Boolean
  ): Notification

  # delete notification
  deleteNotification(id: ID!): ID
  # delte value
  deleteValue(id: ID!): ID
  # delete device
  deleteDevice(id: ID!): ID
  # delete board
  deleteBoard(id: ID!): ID
  # delte user
  deleteUser(password: String!, twoFactorCode: String): ID
  # delte plot node
  deletePlotNode(id: ID!): ID
  # delte string plot node
  deleteStringPlotNode(id: ID!): ID
}

input DeviceFilter {
  OR: [DeviceFilter!]
  AND: [DeviceFilter!]
  customName: String
  deviceType: String
}

type Query {
  # gets user's data
  user: User
  #  get's device's data
  device(id: ID!): Device
  # get's board's data
  board(id: ID!): Board
  # get's value's data
  value(id: ID!): Value
  # get notification's data
  notification(id: ID!): Notification

  verifyPassword(password: String!): Boolean

  allDevices: [Device]
  allBoard: [Board]
  allValues: [Value]
  allNotifications: [Notification]
  allPlotNodes: [PlotNode]
  allMaps: [Map]
  allMapPositions: [MapPosition]
  allFloatValues: [FloatValue]
  allStringValues: [StringValue]
  allPlotValues: [PlotValue]
  allBooleanValues: [BooleanValue]
  allColourValues: [ColourValue]
  allMapValues: [MapValue]
}

type Subscription {
  # subscribes to device creations
  deviceCreated: Device
  # subscribes to board creations
  boardCreated: Board
  # subscribes to value creations
  valueCreated: Value
  # subscribes to plot node creations
  plotNodeCreated: PlotNode
  # subscribes to string plot node creations
  stringPlotNodeCreated: StringPlotNode
  #subscribes to token creations
  tokenCreated: PermanentToken
  # subscribes to notification creations
  notificationCreated: Notification
  # subscribes to board shares
  boardShared: Board
  # subscribes to device shares
  deviceShared: Device
  # subscribes to value shares
  valueShared: Value
  # subscribes to board unshares
  boardStoppedSharing: ID
  # subscribes to device unshares
  deviceStoppedSharing: ID
  # subscribes to values unshares
  valueStoppedSharing: ID
  # subscribes to value updates
  userUpdated: User
  # subscribes to device updates
  deviceUpdated: Device
  # subscribes to board updates
  boardUpdated: Board
  # subscribes to value updates
  valueUpdated: Value
  # subscribes to plot node updates
  plotNodeUpdated: PlotNode
  # subscribes to plot node updates
  stringPlotNodeUpdated: StringPlotNode
  # subscribes to notification updates
  notificationUpdated: Notification
  # subscribes to value deleted
  valueDeleted: ID
  # subscribes to plot node deletes
  plotNodeDeleted: ID
  # subscribes to plot node deletes
  stringPlotNodeDeleted: ID
  # subscribes to device deleted
  deviceDeleted: ID
  # subscribes to board deleted
  boardDeleted: ID
  # subscribes to token deletes
  tokenDeleted: ID
  # subscribes to notification deletes
  notificationDeleted: ID
  # keeps the device's status set as online
  keepOnline(deviceId: ID!): Boolean
}

enum PaymentPlan {
  FREE
  PAYING
}

type User {
  id: ID! @isUnique
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String! @isUnique
  boardsCount: Int
  boards: [Board!]!
  devices: [Device!]!
  values: [Value!]!
  notifications: [Notification!]!
  notificationsCount: Int!
  permanentTokens: [PermanentToken!]!
  quietMode: Boolean
  devMode: Boolean
  nightMode: Boolean
  language: String
  timezone: String
  monthUsage: Int
  paymentPlan: PaymentPlan
  usageCap: Int
  fullName: String
  profileIcon: String
  profileIconColor: String
  emailIsVerified: Boolean
  settings_lengthAndMass: LengthAndMass!
  settings_temperature: Temperature!
  settings_timeFormat: TimeFormat!
  settings_dateFormat: DateFormat!
}

enum RoleExtended {
  OWNER
  ADMIN
  EDITOR
  SPECTATOR
}

type Board {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  myRole: RoleExtended!
  owner: User!
  admins: [User!]!
  editors: [User!]!
  spectators: [User!]!
  customName: String!
  avatar: BoardAvatar!
  devices: [Device!]!
  favorite: Boolean!
  notificationsCount: Int!
  index: Int!
  quietMode: Boolean!
}

type PermanentToken {
  id: ID!
  user: User!
  customName: String!

  # lastUsed=null if never used
  lastUsed: DateTime
}

type Device {
  id: ID! @isUnique
  index: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  # Product name, for example Igloo Thermostat
  deviceType: String
  # Custom name gave by the end-user to the device
  customName: String
  values: [Value!]!
  myRole: RoleExtended!
  owner: User!
  admins: [User!]!
  editors: [User!]!
  spectators: [User!]!
  board: Board
  icon: String
  notifications: [Notification!]!
  notificationsCount: Int!
  online: Boolean
  signalStatus: Float
  batteryStatus: Float
  batteryCharging: Boolean
  firmware: String
  quietMode: Boolean!
}

enum ValuePermission {
  READ_ONLY
  READ_WRITE
}

enum ValueRelevance {
  VISIBLE
  HIDDEN
  INVISIBLE
}

enum TileSize {
  NORMAL
  WIDE
  TALL
  LARGE
}

type Notification {
  id: ID! @isUnique
  device: Device!
  user: User!
  content: String!
  date: DateTime!
  visualized: Boolean!
  snackbarVisualized: Boolean!
}

type PlotNode {
  id: ID! @isUnique
  device: Device!
  plot: PlotValue!
  user: User!
  timestamp: DateTime!
  value: Float!
}

type StringPlotNode {
  id: ID! @isUnique
  device: Device!
  plot: StringPlotValue!
  user: User!
  timestamp: DateTime!
  value: String!
}

type Map {
  id: ID! @isUnique
  deviceValue: Value!
  zoom: Int!
  position: MapPosition!
  geoJSON: Json!
}

type MapPosition {
  id: ID! @isUnique
  latitude: Float!
  longitude: Float!
  map: Map!
}

interface Value {
  id: ID! @isUnique
  createdAt: DateTime!
  updatedAt: DateTime!
  device: Device!
  myRole: RoleExtended!
  owner: User!
  admins: [User!]!
  editors: [User!]!
  spectators: [User!]!
  permission: ValuePermission! @defaultValue(value: READ_WRITE)
  relevance: ValueRelevance! @defaultValue(value: NORMAL)
  valueDetails: String
  tileSize: TileSize!
  customName: String
  index: Int
}

type FloatValue implements Value {
  id: ID! @isUnique
  createdAt: DateTime!
  updatedAt: DateTime!
  device: Device!
  myRole: RoleExtended!
  owner: User!
  admins: [User!]!
  editors: [User!]!
  spectators: [User!]!
  permission: ValuePermission! @defaultValue(value: READ_WRITE)
  relevance: ValueRelevance! @defaultValue(value: NORMAL)
  valueDetails: String
  value: Float!
  # used when the end-user reads or modifies the value
  precision: Float
  # [min, max]
  boundaries: [Float!]
  tileSize: TileSize!
  index: Int
  customName: String
}

type StringValue implements Value {
  id: ID! @isUnique
  createdAt: DateTime!
  updatedAt: DateTime!
  device: Device!
  myRole: RoleExtended!
  owner: User!
  admins: [User!]!
  editors: [User!]!
  spectators: [User!]!
  permission: ValuePermission! @defaultValue(value: READ_WRITE)
  relevance: ValueRelevance! @defaultValue(value: NORMAL)
  valueDetails: String
  value: String!
  maxChars: Int
  tileSize: TileSize!
  index: Int
  customName: String
  allowedValues: [String!]
}

type PlotValue implements Value {
  id: ID! @isUnique
  createdAt: DateTime!
  updatedAt: DateTime!
  device: Device!
  myRole: RoleExtended!
  owner: User!
  admins: [User!]!
  editors: [User!]!
  spectators: [User!]!
  permission: ValuePermission! @defaultValue(value: READ_WRITE)
  relevance: ValueRelevance! @defaultValue(value: NORMAL)
  valueDetails: String
  value: [PlotNode!]!
  # used when the end-user reads or modifies the value
  precision: Float
  # [min, max]
  boundaries: [Float!]
  tileSize: TileSize!
  customName: String
  index: Int

  threshold: Float
}

type StringPlotValue implements Value {
  id: ID! @isUnique
  createdAt: DateTime!
  updatedAt: DateTime!
  device: Device!
  myRole: RoleExtended!
  owner: User!
  admins: [User!]!
  editors: [User!]!
  spectators: [User!]!
  permission: ValuePermission! @defaultValue(value: READ_WRITE)
  relevance: ValueRelevance! @defaultValue(value: NORMAL)
  valueDetails: String
  value: [StringPlotNode!]!
  tileSize: TileSize!
  customName: String
  index: Int
  allowedValues: [String!]
}

type BooleanValue implements Value {
  id: ID! @isUnique
  createdAt: DateTime!
  updatedAt: DateTime!
  device: Device!
  myRole: RoleExtended!
  owner: User!
  admins: [User!]!
  editors: [User!]!
  spectators: [User!]!
  permission: ValuePermission! @defaultValue(value: READ_WRITE)
  relevance: ValueRelevance! @defaultValue(value: NORMAL)
  valueDetails: String
  value: Boolean!
  tileSize: TileSize!
  customName: String
  index: Int
}

type ColourValue implements Value {
  id: ID! @isUnique
  createdAt: DateTime!
  updatedAt: DateTime!
  device: Device!
  myRole: RoleExtended!
  owner: User!
  admins: [User!]!
  editors: [User!]!
  spectators: [User!]!
  permission: ValuePermission! @defaultValue(value: READ_WRITE)
  relevance: ValueRelevance! @defaultValue(value: NORMAL)
  valueDetails: String
  # hex value prefixed with #
  value: String!
  tileSize: TileSize!
  customName: String
  index: Int
  allowedValues: [String!]
}

type MapValue implements Value {
  id: ID! @isUnique
  createdAt: DateTime!
  updatedAt: DateTime!
  device: Device!
  myRole: RoleExtended!
  owner: User!
  admins: [User!]!
  editors: [User!]!
  spectators: [User!]!
  permission: ValuePermission! @defaultValue(value: READ_WRITE)
  relevance: ValueRelevance! @defaultValue(value: NORMAL)
  valueDetails: String
  value: String
  latitude: Float
  longitude: Float
  height: Float
  tileSize: TileSize!
  customName: String
  index: Int
}
