scalar DateTime

scalar Json

enum EnvironmentPicture {
  NORTHERN_LIGHTS
  DENALI
  FOX
  PUFFIN
  TREETOPS
}

# Payload returned after signing up
type signUpPayload {
  changeAuthenticationToken: String!
}

# Payload returned when authenticating
type authenticationPayload {
  # token used to authenticate, pass it as a bearer in the authentication header
  token: String!
  user: User!
}

type permanentTokenPayload {
  token: String!
  id: ID!
}

type acceptPendingEnvironmentSharePayload {
  id: ID!
  sender: User!
  receiver: User!
  role: Role!
  environment: Environment!
}

type acceptPendingOwnerChangePayload {
  id: ID!
  sender: User!
  receiver: User!
  environment: Environment!
}

type createUnclaimedDevicePayload {
  id: ID!
  qrCode: String!
  jwtToken: String!
}

# Data needed to display the QR code when upgrading to 2-Factor Authentication
# type UpgradeTo2FactorPayload {
#   # totp secret
#   secret: String
#   # svg for the qr code
#   qrCode: String
# }

enum Role {
  ADMIN
  EDITOR
  SPECTATOR
}

enum LengthAndMass {
  SI
  IMPERIAL
}

enum Temperature {
  CELSIUS
  FAHRENHEIT
  KELVIN
}

enum DateFormat {
  DMY
  MDY
  YMD
  YDM
}

enum TimeFormat {
  H24
  H12
}

enum TokenType {
  DELETE_USER
  CHANGE_EMAIL
  MANAGE_PERMANENT_TOKENS
  CHANGE_AUTHENTICATION
}

enum PrimaryAuthenticationMethod {
  PASSWORD
  WEBAUTHN
}

enum SecondaryAuthenticationMethod {
  PASSWORD
  WEBAUTHN
  TOTP
}

# All available mutations
type Mutation {
  # Gets an authentication token
  logIn(email: String!, password: String!): authenticationPayload
  logInWithWebAuthn(
    challengeResponse: String!
    jwtChallenge: String!
  ): authenticationPayload

  # creates a token to perform special operations
  createToken(password: String!, tokenType: TokenType!): String

  # Generates a permanent access token
  createPermanentToken(
    name: String! # name of the token
  ): permanentTokenPayload

  regeneratePermanentToken(id: ID!): String
  # removes a permanent access token
  deletePermanentToken(id: ID!): ID

  # Creates a new account
  signUp(email: String!, name: String!): signUpPayload
  # Creates a new account
  enablePassword(password: String!): authenticationPayload

  # Sends an email with a llink to change the password
  sendPasswordRecoveryEmail(email: String!): Boolean

  enableWebauthn(
    challengeResponse: String
    jwtChallenge: String
  ): authenticationPayload
  # Upgrades a user to 2 factor authentication
  # UpgradeTo2FactorAuthentication: UpgradeTo2FactorPayload

  # Changes the password of the authenticated user
  changePassword(newPassword: String!): authenticationPayload

  changeAuthenticationSettings(
    primaryAuthenticationMethods: [PrimaryAuthenticationMethod!]!
    secondaryAuthenticationMethods: [SecondaryAuthenticationMethod!]!
  ): User

  resendVerificationEmail: Boolean

  shareEnvironment(
    environmentId: ID!
    email: String!
    role: Role!
  ): PendingEnvironmentShare
  pendingEnvironmentShare(id: ID!, role: Role!): PendingEnvironmentShare
  # returns the ID of the pending share that was revoked
  revokePendingEnvironmentShare(pendingEnvironmentShareId: ID!): ID

  # returns the ID of the accepted environment
  acceptPendingEnvironmentShare(
    pendingEnvironmentShareId: ID!
  ): acceptPendingEnvironmentSharePayload
  # returns the ID of the declined environment
  declinePendingEnvironmentShare(pendingEnvironmentShareId: ID!): ID

  stopSharingEnvironment(environmentId: ID!, email: String!): Environment
  leaveEnvironment(environmentId: ID!): ID

  changeOwner(environmentId: ID!, email: String!): PendingOwnerChange
  # returns the ID of the pending share that was revoked
  revokePendingOwnerChange(pendingOwnerChangeId: ID!): ID

  # returns the ID of the accepted environment
  acceptPendingOwnerChange(
    pendingOwnerChangeId: ID!
  ): acceptPendingOwnerChangePayload
  # returns the ID of the accepted environment
  declinePendingOwnerChange(pendingOwnerChangeId: ID!): ID

  changeRole(environmentId: ID!, email: String!, newRole: Role!): Environment

  # Creates a Environment
  createEnvironment(
    name: String!
    picture: EnvironmentPicture
    index: Int
    muted: Boolean
  ): Environment

  # Creates a new Device
  createDevice(
    # Product name, for example Igloo Thermostat
    deviceType: String
    # Custom name gave by the end-user to the device
    name: String!
    # used to sort the devices in Igloo Aurora
    index: Int
    signalStatus: Float
    batteryStatus: Float
    batteryCharging: Boolean
    environmentId: ID!
    firmware: String
    muted: Boolean
  ): Device

  # FIXME: change name
  createUnclaimedDevice(
    deviceType: String
    firmware: String
  ): createUnclaimedDevicePayload

  claimDevice(
    unclaimedDeviceId: ID!
    name: String!
    index: Int
    signalStatus: Float
    batteryStatus: Float
    batteryCharging: Boolean
    environmentId: ID!
    muted: Boolean
  ): Device

  # Creates a new notification
  createNotification(
    # device associated with the notification
    deviceId: ID!
    content: String! # optional if you want to change the date # date: DateTime
    date: DateTime
  ): Notification

  # Creates a new FloatValue
  createFloatValue(
    # device owning the value
    deviceId: ID!
    # whether the value should be READ_ONLY or READ_WRITE in Igloo Aurora
    permission: ValuePermission!
    # whether the value should be VISIBLE, HIDDEN or INVISIBLE in Igloo Aurora
    visibility: ValueVisibility
    # additional details about the value
    unitOfMeasurement: String
    value: Float!
    # used when displaying or changing the value in Igloo Aurora
    precision: Float
    min: Float
    max: Float
    # name of the value, displayed in Igloo Aurora
    name: String!
    # tile size in Igloo Aurora
    cardSize: CardSize
    index: Int
  ): FloatValue

  # Creates a StringValue
  createStringValue(
    # device owning the value
    deviceId: ID!
    # whether the value should be READ_ONLY or READ_WRITE in Igloo Aurora
    permission: ValuePermission!
    # whether the value should be VISIBLE, HIDDEN or INVISIBLE in Igloo Aurora
    visibility: ValueVisibility
    value: String!
    # max length of the string
    maxChars: Int
    # name of the value, displayed in Igloo Aurora
    name: String!
    # tile size in Igloo Aurora
    cardSize: CardSize
    # allowed values for the string
    allowedValues: [String!]
    index: Int
  ): StringValue

  # Creates a BooleanValue
  createBooleanValue(
    # device owning the value
    deviceId: ID!
    # whether the value should be READ_ONLY or READ_WRITE in Igloo Aurora
    permission: ValuePermission!
    # whether the value should be VISIBLE, HIDDEN or INVISIBLE in Igloo Aurora
    visibility: ValueVisibility
    value: Boolean!
    # name of the value, displayed in Igloo Aurora
    name: String!
    # tile size in Igloo Aurora
    cardSize: CardSize
    index: Int
  ): BooleanValue

  # Creates a MapValue
  createMapValue(
    # device owning the value
    deviceId: ID!
    # whether the value should be READ_ONLY or READ_WRITE in Igloo Aurora
    permission: ValuePermission!
    # whether the value should be VISIBLE, HIDDEN or INVISIBLE in Igloo Aurora
    visibility: ValueVisibility
    # name of the value, displayed in Igloo Aurora
    name: String!
    # tile size in Igloo Aurora
    cardSize: CardSize
    # GEOJson string
    value: String
    latitude: Float
    longitude: Float
    height: Float
    index: Int
  ): MapValue

  # Creates a new PlotValue
  createPlotValue(
    # device owning the value
    deviceId: ID!
    # whether the value should be VISIBLE, HIDDEN or INVISIBLE in Igloo Aurora
    visibility: ValueVisibility
    # additional details about the value
    unitOfMeasurement: String
    # used when the end-user reads or modifies the value
    precision: Float
    # [min, max]
    min: Float
    max: Float
    # name of the value, displayed in Igloo Aurora
    name: String!
    # tile size in Igloo Aurora
    cardSize: CardSize
    # alert threshold, values above the threshold will be displayed in red in Igloo Aurora
    threshold: Float
    index: Int
  ): PlotValue

  # Creates a new node in a plot
  createPlotNode(
    # id of the parent plot
    plotId: ID!
    # default is now
    timestamp: DateTime
    value: Float!
  ): PlotNode

  # Creates a new PlotValue
  createCategoryPlotValue(
    # device owning the value
    deviceId: ID!
    # whether the value should be VISIBLE, HIDDEN or INVISIBLE in Igloo Aurora
    visibility: ValueVisibility
    # name of the value, displayed in Igloo Aurora
    name: String!
    # tile size in Igloo Aurora
    cardSize: CardSize
    # allowed labels
    allowedValues: [String!]
    index: Int
  ): CategoryPlotValue

  # Creates a new node in a plot
  createCategoryPlotNode(
    # id of the parent plot
    plotId: ID!
    # default is now
    timestamp: DateTime
    value: String!
  ): CategoryPlotNode

  # Change user's data
  user(
    quietMode: Boolean
    usageCap: Int
    paymentPlan: PaymentPlan
    name: String
    profileIcon: String
  ): User
  changeEmail(newEmail: String!): Boolean

  settings(
    language: String
    lengthAndMass: LengthAndMass
    temperature: Temperature
    dateFormat: DateFormat
    timeFormat: TimeFormat
    passwordChangeEmail: Boolean
    pendingOwnerChangeReceivedEmail: Boolean
    pendingEnvironmentShareReceivedEmail: Boolean
    pendingOwnerChangeAcceptedEmail: Boolean
    pendingEnvironmentShareAcceptedEmail: Boolean
    permanentTokenCreatedEmail: Boolean
  ): Settings

  updatePaymentInfo(stripeToken: String!): Boolean

  # changes environment's data
  environment(
    id: ID!
    name: String
    picture: EnvironmentPicture
    index: Int
    muted: Boolean
  ): Environment

  # changes device's data
  device(
    # device id
    id: ID!
    # Product name, for example Igloo Thermostat
    deviceType: String
    # Custom name gave by the end-user to the device
    name: String
    # used to sort the devices in Igloo Aurora
    index: Int
    signalStatus: Float
    batteryStatus: Float
    batteryCharging: Boolean
    firmware: String
    muted: Boolean
    starred: Boolean
  ): Device

  value(
    id: ID!
    visibility: ValueVisibility
    cardSize: CardSize
    name: String
    index: Int
  ): Value

  moveDevice(deviceId: ID!, newEnvironmentId: ID!): Device

  resetOnlineState(deviceId: ID!): Device

  # changes floatValue's data
  floatValue(
    # value id
    id: ID!
    # whether the value should be READ_ONLY or READ_WRITE in Igloo Aurora
    permission: ValuePermission
    # whether the value should be VISIBLE, HIDDEN or INVISIBLE in Igloo Aurora
    visibility: ValueVisibility
    # additional details about the value
    unitOfMeasurement: String
    value: Float
    # used when displaying or changing the value in Igloo Aurora
    precision: Float
    min: Float
    max: Float
    # name of the value, displayed in Igloo Aurora
    name: String
    # tile size in Igloo Aurora
    cardSize: CardSize
    index: Int
  ): FloatValue

  atomicUpdateFloat(id: ID!, incrementBy: Float!): FloatValue

  # changes stringValue's data
  stringValue(
    # value id
    id: ID!
    # whether the value should be READ_ONLY or READ_WRITE in Igloo Aurora
    permission: ValuePermission
    # whether the value should be VISIBLE, HIDDEN or INVISIBLE in Igloo Aurora
    visibility: ValueVisibility
    value: String
    # max length of the string
    maxChars: Int
    # name of the value, displayed in Igloo Aurora
    name: String
    # tile size in Igloo Aurora
    cardSize: CardSize
    # allowed values for the string
    allowedValues: [String!]
    index: Int
  ): StringValue

  # changes booleanValue's data
  booleanValue(
    # value id
    id: ID!
    # whether the value should be READ_ONLY or READ_WRITE in Igloo Aurora
    permission: ValuePermission
    # whether the value should be VISIBLE, HIDDEN or INVISIBLE in Igloo Aurora
    visibility: ValueVisibility
    value: Boolean
    # name of the value, displayed in Igloo Aurora
    name: String
    # tile size in Igloo Aurora
    cardSize: CardSize
    index: Int
  ): BooleanValue

  # changes mapValue's data
  mapValue(
    # value id
    id: ID!
    # whether the value should be READ_ONLY or READ_WRITE in Igloo Aurora
    permission: ValuePermission
    # whether the value should be VISIBLE, HIDDEN or INVISIBLE in Igloo Aurora
    visibility: ValueVisibility
    # name of the value, displayed in Igloo Aurora
    name: String
    # tile size in Igloo Aurora
    cardSize: CardSize
    # GEOJson string
    value: String
    latitude: Float
    longitude: Float
    height: Float
    index: Int
  ): MapValue

  # changes plotValue's data
  plotValue(
    # value id
    id: ID!
    # whether the value should be VISIBLE, HIDDEN or INVISIBLE in Igloo Aurora
    visibility: ValueVisibility
    # additional details about the value
    unitOfMeasurement: String
    # used when the end-user reads or modifies the value
    precision: Float
    min: Float
    max: Float
    # name of the value, displayed in Igloo Aurora
    name: String
    # tile size in Igloo Aurora
    cardSize: CardSize
    # alert threshold, values above the threshold will be displayed in red in Igloo Aurora
    threshold: Float
    index: Int
  ): PlotValue

  # change plotNode's data
  plotNode(
    # node's id
    id: ID!
    # node's value
    value: Float
    # node's timestamp
    timestamp: DateTime
  ): PlotNode

  # changes CategoryPlotValue's data
  categoryPlotValue(
    # value id
    id: ID!
    # whether the value should be VISIBLE, HIDDEN or INVISIBLE in Igloo Aurora
    visibility: ValueVisibility
    # name of the value, displayed in Igloo Aurora
    name: String
    # tile size in Igloo Aurora
    cardSize: CardSize
    # allowed labels
    allowedValues: [String!]
    index: Int
  ): PlotValue

  # change CategoryPlotNode's data
  categoryPlotNode(
    # node's id
    id: ID!
    # node's value
    value: String
    # node's timestamp
    timestamp: DateTime
  ): CategoryPlotNode

  # change notification's data
  notification(
    # notification's id
    id: ID!
    # notification's content
    content: String
    # whether the notification has already been read
    read: Boolean
  ): Notification

  # delete notification
  deleteNotification(id: ID!): ID
  # delte value
  deleteValue(id: ID!): ID
  # delete device
  deleteDevice(id: ID!): ID
  # delete environment
  deleteEnvironment(id: ID!): ID
  # delte user
  deleteUser: ID
  # delte plot node
  deletePlotNode(id: ID!): ID
  # delte string plot node
  deleteCategoryPlotNode(id: ID!): ID
}

input EnvironmentFilter {
  OR: [EnvironmentFilter!]
  AND: [EnvironmentFilter!]
  name: StringFilter
  muted: Boolean
}

input StringFilter {
  similarTo: String
  like: String
  equals: String
}

input FloatFilter {
  equals: Float
  greaterThan: Float
  greaterOrEqualTo: Float
  lessThan: Float
  lessOrEqualTo: Float
}

input DateFilter {
  equals: DateTime
  greaterThan: DateTime
  greaterOrEqualTo: DateTime
  lessThan: DateTime
  lessOrEqualTo: DateTime
}

input DeviceFilter {
  OR: [DeviceFilter!]
  AND: [DeviceFilter!]
  name: StringFilter
  online: Boolean
  signalStatus: FloatFilter
  batteryStatus: FloatFilter
  batteryCharging: Boolean
  firmware: StringFilter
  muted: Boolean
  starred: Boolean
}

input ValueFilter {
  OR: [ValueFilter!]
  AND: [ValueFilter!]
  name: StringFilter
  cardSize: CardSize
}

input NotificationFilter {
  OR: [NotificationFilter!]
  AND: [NotificationFilter!]
  content: StringFilter
  date: DateFilter
  read: Boolean
}

type WebauthnChallenge {
  publicKeyOptions: String
  jwtChallenge: String
}

type Query {
  # gets user's data
  user(email: String): User
  #  get's device's data
  device(id: ID!): Device
  # get's environment's data
  environment(id: ID!): Environment
  # get's value's data
  value(id: ID!): Value
  # get notification's data
  notification(id: ID!): Notification
  # get plotNode's data
  plotNode(id: ID!): PlotNode
  # get categoryPlotNode's data
  categoryPlotNode(id: ID!): CategoryPlotNode
  # get's challenge to enable webauthn
  getWebAuthnEnableChallenge: WebauthnChallenge
  # get's challenge to sign in with webauthn
  getWebAuthnLogInChallenge(email: String!): WebauthnChallenge
}

type Subscription {
  # subscribes to device creations
  deviceCreated: Device
  # subscribes to device creations
  deviceClaimed: Device
  # subscribes to environment creations
  environmentCreated: Environment
  # subscribes to value creations
  valueCreated: Value
  # subscribes to plot node creations
  plotNodeCreated: PlotNode
  # subscribes to string plot node creations
  categoryPlotNodeCreated: CategoryPlotNode
  #subscribes to token creations
  permanentTokenCreated: PermanentToken
  # subscribes to notification creations
  notificationCreated: Notification
  # subscribes to device creations
  deviceMoved: Device
  # subscribes to environment shares to you
  pendingEnvironmentShareReceived: PendingEnvironmentShare
  pendingEnvironmentShareUpdated: PendingEnvironmentShare
  # returns the environment accepted
  pendingEnvironmentShareAccepted: acceptPendingEnvironmentSharePayload
  # returns the id of the environment declined
  pendingEnvironmentShareDeclined: ID
  # returns the id of the environment share that was revoked
  pendingEnvironmentShareRevoked: ID
  # subscribes to owner change to you
  pendingOwnerChangeReceived: PendingOwnerChange
  # subscribes to ownerChange updates
  pendingOwnerChangeUpdated: PendingOwnerChange
  # returns the id of the environment accepted
  pendingOwnerChangeAccepted: acceptPendingOwnerChangePayload
  # returns the id of the environment declined
  pendingOwnerChangeDeclined: ID
  # returns the id of the owner change that was revoked
  pendingOwnerChangeRevoked: ID
  # subscribes to environment unshares from you or you leave an environment
  environmentStoppedSharingWithYou: ID
  # default id is the user making the request
  userUpdated(id: ID): User
  # subscribes to device updates
  deviceUpdated: Device
  # subscribes to environment updates
  environmentUpdated: Environment
  # subscribes to value updates
  valueUpdated: Value
  # subscribes to plot node updates
  plotNodeUpdated: PlotNode
  # subscribes to plot node updates
  categoryPlotNodeUpdated: CategoryPlotNode
  # subscribes to notification updates
  notificationUpdated: Notification
  # subscribes to value deleted
  valueDeleted: ID
  # subscribes to plot node deletes
  plotNodeDeleted: ID
  # subscribes to plot node deletes
  categoryPlotNodeDeleted: ID
  # subscribes to device deletes
  deviceDeleted: ID
  # subscribes to environment deletes
  environmentDeleted: ID
  # subscribes to user deletes
  userDeleted(id: ID): ID
  # subscribes to token deletes
  permanentTokenDeleted: ID
  # subscribes to notification deletes
  notificationDeleted: ID
  # keeps the device's status set as online
  keepOnline(deviceId: ID!): Boolean
}

enum PaymentPlan {
  FREE
  INDIVIDUAL
  BUSINESS
}

type Settings {
  lengthAndMass: LengthAndMass!
  temperature: Temperature!
  timeFormat: TimeFormat!
  dateFormat: DateFormat!
  language: String!
  passwordChangeEmail: Boolean!
  pendingOwnerChangeReceivedEmail: Boolean!
  pendingEnvironmentShareReceivedEmail: Boolean!
  pendingOwnerChangeAcceptedEmail: Boolean!
  pendingEnvironmentShareAcceptedEmail: Boolean!
  permanentTokenCreatedEmail: Boolean!
}

type User {
  id: ID!
  email: String!
  pendingEnvironmentShareCount: Int!
  pendingEnvironmentShares: [PendingEnvironmentShare!]!
  pendingOwnerChangeCount: Int!
  pendingOwnerChanges: [PendingOwnerChange!]!
  environmentCount: Int!
  environments(
    sortBy: ENVIRONMENT_SORT
    sortDirection: SORT_DIRECTION
    limit: Int
    offset: Int
    filter: EnvironmentFilter
  ): [Environment!]!
  deviceCount: Int
  valueCount: Int!
  notificationCount: Int!
  permanentTokenCount: Int!
  permanentTokens(limit: Int, offset: Int): [PermanentToken!]!
  quietMode: Boolean
  monthUsage: Int
  paymentPlan: PaymentPlan
  usageCap: Int
  name: String
  profileIcon: String
  profileIconColor: String
  emailIsVerified: Boolean
  settings: Settings!
  primaryAuthenticationMethods: [PrimaryAuthenticationMethod!]!
  secondaryAuthenticationMethods: [SecondaryAuthenticationMethod!]!
}

enum RoleExtended {
  OWNER
  ADMIN
  EDITOR
  SPECTATOR
}

enum DEVICE_SORT {
  id
  index
  name
  deviceType
}

enum ENVIRONMENT_SORT {
  id
  index
  name
}

enum SORT_DIRECTION {
  ASCENDING
  DESCENDING
}

type Environment {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  myRole: RoleExtended!
  owner: User!
  admins: [User!]!
  editors: [User!]!
  spectators: [User!]!
  # returns null only if you don't have admin rights
  pendingEnvironmentShareCount: Int
  # returns null only if you don't have admin rights
  pendingEnvironmentShares: [PendingEnvironmentShare!]
  # returns null only if you don't have admin rights
  pendingOwnerChangeCount: Int
  # returns null only if you don't have admin rights
  pendingOwnerChanges: [PendingOwnerChange!]
  name: String!
  picture: EnvironmentPicture!
  deviceCount(filter: DeviceFilter): Int
  devices(
    limit: Int
    offset: Int
    filter: DeviceFilter
    sortBy: DEVICE_SORT
    sortDirection: SORT_DIRECTION
  ): [Device!]!
  notificationCount: Int!
  index: Int!
  muted: Boolean!
}

type PendingEnvironmentShare {
  id: ID!
  sender: User!
  receiver: User!
  role: Role!
  environment: Environment!
}

type PendingOwnerChange {
  id: ID!
  sender: User!
  receiver: User!
  environment: Environment!
}

type PermanentToken {
  id: ID!
  user: User!
  name: String!

  # lastUsed=null if never used
  lastUsed: DateTime
}

enum VALUE_SORT {
  id
  index
  name
}

type Device {
  id: ID!
  index: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  myRole: RoleExtended!
  starred: Boolean
  # Product name, for example Igloo Thermostat
  deviceType: String
  # Custom name gave by the end-user to the device
  name: String
  values(
    limit: Int
    offset: Int
    sortBy: VALUE_SORT
    sortDirection: SORT_DIRECTION
    filter: ValueFilter
  ): [Value!]!
  environment: Environment!
  notifications(
    limit: Int
    offset: Int
    filter: NotificationFilter
  ): [Notification!]!
  lastNotification(filter: NotificationFilter): Notification
  notificationCount: Int!
  online: Boolean
  signalStatus: Float
  batteryStatus: Float
  batteryCharging: Boolean
  firmware: String
  muted: Boolean!
}

enum ValuePermission {
  READ_ONLY
  READ_WRITE
}

enum ValueVisibility {
  VISIBLE
  HIDDEN
  INVISIBLE
}

enum CardSize {
  NORMAL
  WIDE
  LARGE
}

type Notification {
  id: ID!
  device: Device!
  environment: Environment!
  user: User!
  content: String!
  date: DateTime!
  read: Boolean!
}

type PlotNode {
  id: ID!
  device: Device!
  plot: PlotValue!
  user: User!
  timestamp: DateTime!
  value: Float!
}

type CategoryPlotNode {
  id: ID!
  device: Device!
  plot: CategoryPlotValue!
  user: User!
  timestamp: DateTime!
  value: String!
}

type Map {
  id: ID!
  deviceValue: Value!
  zoom: Int!
  position: MapPosition!
  geoJSON: Json!
}

type MapPosition {
  id: ID!
  latitude: Float!
  longitude: Float!
  map: Map!
}

interface Value {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  myRole: RoleExtended!
  device: Device!
  environment: Environment!
  visibility: ValueVisibility!
  cardSize: CardSize!
  name: String
  index: Int
}

type FloatValue implements Value {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  myRole: RoleExtended!
  device: Device!
  environment: Environment!
  permission: ValuePermission!
  visibility: ValueVisibility!
  unitOfMeasurement: String
  value: Float!
  # used when the end-user reads or modifies the value
  precision: Float
  min: Float
  max: Float
  cardSize: CardSize!
  index: Int
  name: String
}

type StringValue implements Value {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  myRole: RoleExtended!
  device: Device!
  environment: Environment!
  permission: ValuePermission!
  visibility: ValueVisibility!
  value: String!
  maxChars: Int
  cardSize: CardSize!
  index: Int
  name: String
  allowedValues: [String!]
}

type PlotValue implements Value {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  myRole: RoleExtended!
  device: Device!
  environment: Environment!
  visibility: ValueVisibility!
  unitOfMeasurement: String
  value(limit: Int, offset: Int): [PlotNode!]!
  lastNode: PlotNode
  # used when the end-user reads or modifies the value
  precision: Float
  min: Float
  max: Float
  cardSize: CardSize!
  name: String
  index: Int

  threshold: Float
}

type CategoryPlotValue implements Value {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  myRole: RoleExtended!
  device: Device!
  environment: Environment!
  visibility: ValueVisibility!
  value(limit: Int, offset: Int): [CategoryPlotNode!]!
  lastNode: CategoryPlotNode
  cardSize: CardSize!
  name: String
  index: Int
  allowedValues: [String!]
}

type BooleanValue implements Value {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  myRole: RoleExtended!
  device: Device!
  environment: Environment!
  permission: ValuePermission!
  visibility: ValueVisibility!
  value: Boolean!
  cardSize: CardSize!
  name: String
  index: Int
}

type MapValue implements Value {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  myRole: RoleExtended!
  device: Device!
  environment: Environment!
  permission: ValuePermission!
  visibility: ValueVisibility!
  value: String
  latitude: Float
  longitude: Float
  height: Float
  cardSize: CardSize!
  name: String
  index: Int
}
